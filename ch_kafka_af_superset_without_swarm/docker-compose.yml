version: '3'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.3}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_UID: 5000
    AIRFLOW_GID: 0
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/data:/opt/airflow/data
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy


networks:
  click_network:
    external: true
services:
  zookeeper1:
    cpus: 0.7
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper1
    container_name: zookeeper1
    ports:
      - "1181:1181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 1181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: "zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888"
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
    volumes:
      - ./zookeeper/zookeeper1:/var/lib/zookeeper
    networks:
      click_network: {}

  zookeeper2:
    cpus: 0.7
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper2
    container_name: zookeeper2
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: "zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888"
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
    volumes:
      - ./zookeeper/zookeeper2:/var/lib/zookeeper
    networks:
      click_network: {}


  zookeeper3:
    cpus: 0.7
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper3
    container_name: zookeeper3
    ports:
      - "3181:3181"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 3181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: "zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888"
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=*
    volumes:
      - ./zookeeper/zookeeper3:/var/lib/zookeeper
    networks:
      click_network: {}

  clickhouse01:
    image: clickhouse/clickhouse-server:24.6.1
    hostname: clickhouse01
    container_name: clickhouse01
    cpus: 2
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
    - 9001:9000
    - 8123:8123
    networks:
      click_network: {}
    volumes:
    - ./config/clickhouse01:/etc/clickhouse-server/config.d
    - ./config/users.xml:/etc/clickhouse-server/users.d/users.xml
    - ./log/clickhouse01:/var/log/clickhouse-server
    - ./data/clickhouse01:/var/lib/clickhouse
  clickhouse02:
    image: clickhouse/clickhouse-server:24.6.1
    hostname: clickhouse02
    container_name: clickhouse02
    cpus: 2
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
    - 9002:9000
    - 8124:8123
    networks:
      click_network: {}
    volumes:
    - ./config/clickhouse02:/etc/clickhouse-server/config.d
    - ./config/users.xml:/etc/clickhouse-server/users.d/users.xml
    - ./log/clickhouse02:/var/log/clickhouse-server
    - ./data/clickhouse02:/var/lib/clickhouse
  clickhouse03:
    image: clickhouse/clickhouse-server:24.6.1
    hostname: clickhouse03
    container_name: clickhouse03
    cpus: 2
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
    - 9003:9000
    - 8125:8123
    networks:
      click_network: {}
    volumes:
    - ./config/clickhouse03:/etc/clickhouse-server/config.d
    - ./config/users.xml:/etc/clickhouse-server/users.d/users.xml
    - ./log/clickhouse03:/var/log/clickhouse-server
    - ./data/clickhouse03:/var/lib/clickhouse
  kafka1:
    cpus: 0.7
    image: confluentinc/cp-server:7.7.1
    hostname: kafka1
    container_name: kafka1
    restart: on-failure:3
    ports:
      - 9091:9091
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:1181,zookeeper2:2181,zookeeper3:3181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,SECURE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,SECURE://localhost:9091
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: 'false'
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: 'false'

      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      #KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=DEBUG"

      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: INTERNAL://kafka1:19092,INTERNAL://kafka2:19092,INTERNAL://kafka3:19092
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      KAFKA_CONFLUENT_BALANCER_ENABLE: 'true'

      KAFKA_CONFLUENT_HTTP_SERVER_LISTENERS: http://kafka1:1090

      #Embedded Rest Proxy config required for http server
      KAFKA_KAFKA_REST_CLIENT_SECURITY_PROTOCOL: PLAINTEXT
    # volumes:
    #   - ./data/kafka1/:/var/lib/kafka/data
    #   - ./config/kafka1/:/etc/kafka/kraft
    networks:
      click_network: {}

  kafka2:
    cpus: 0.7
    image: confluentinc/cp-server:7.7.1
    hostname: kafka2
    container_name: kafka2
    restart: on-failure:3
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:1182,zookeeper2:2181,zookeeper3:3181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,SECURE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19092,SECURE://localhost:9092
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: 'false'
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: 'false'

      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: INTERNAL://kafka1:19092,INTERNAL://kafka2:19092,INTERNAL://kafka3:19092
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      KAFKA_CONFLUENT_BALANCER_ENABLE: 'true'

      KAFKA_CONFLUENT_HTTP_SERVER_LISTENERS: http://kafka2:2090

      KAFKA_KAFKA_REST_CLIENT_SECURITY_PROTOCOL: PLAINTEXT
    # volumes:
    #   - ./data/kafka2/:/var/lib/kafka/data
    #   - ./config/kafka2/:/etc/kafka/kraft
    networks:
      click_network: {}

  kafka3:
    cpus: 0.7
    image: confluentinc/cp-server:7.7.1
    hostname: kafka3
    container_name: kafka3
    restart: on-failure:3
    ports:
      - 9093:9093
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:1182,zookeeper2:2181,zookeeper3:3181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,SECURE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19092,SECURE://localhost:9093
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: 'false'
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: 'false'

      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: INTERNAL://kafka1:19092,INTERNAL://kafka2:19092,INTERNAL://kafka3:19092
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      KAFKA_CONFLUENT_BALANCER_ENABLE: 'true'


      KAFKA_CONFLUENT_HTTP_SERVER_LISTENERS: http://kafka3:3090

      KAFKA_KAFKA_REST_CLIENT_SECURITY_PROTOCOL: PLAINTEXT
    # volumes:
    #   - ./data/kafka3/:/var/lib/kafka/data
    #   - ./config/kafka3/:/etc/kafka/kraft
    networks:
      click_network: {}

  schemaregistry:
    image: confluentinc/cp-schema-registry:7.7.1
    hostname: schemaregistry
    container_name: schemaregistry
    restart: on-failure:3
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
    - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_GROUP_ID: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka1:19092,kafka2:19092,kafka3:19092'
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_DEBUG: 'true'
    networks:
      click_network: {}

  connect:
    image: confluentinc/cp-server-connect:7.5.1
    hostname: connect
    container_name: connect
    networks:
      click_network: {}
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - schemaregistry
    ports:
      - "8083:8083"
    volumes:
      - ./confluent-hub-components:/usr/share/confluent-hub-components
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka1:19092,kafka2:19092,kafka3:19092'
      CONNECT_LISTENERS: http://0.0.0.0:8083
      CONNECT_PRODUCER_CLIENT_ID: "connect-worker-producer"
      CONNECT_PRODUCER_ENABLE_IDEMPOTENCE: 'true'
      CONNECT_SECURITY_PROTOCOL: PLAINTEXT
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 2
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: 'All'
      CONNECT_PRODUCER_SECURITY_PROTOCOL: PLAINTEXT

      CONNECT_PRODUCER_MAX_BLOCK_MS: 60000
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: PLAINTEXT

      CONNECT_CONSUMER_SECURITY_PROTOCOL: PLAINTEXT
      CONNECT_CONSUMER_MAX_BLOCK_MS: 60000

      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.5.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO

  controlcenter:
    image: confluentinc/cp-enterprise-control-center:7.5.1
    hostname: controlcenter
    container_name: controlcenter
    restart: always
    networks:
      click_network: {}
    volumes:
      - ./secrets:/etc/kafka/secrets
    ports:
      - "9021:9021"
    environment:
      CUB_CLASSPATH: '/usr/share/java/confluent-control-center/*:/usr/share/java/rest-utils/*:/usr/share/java/confluent-common/*:/usr/share/java/confluent-security/kafka-rest/*:/usr/share/java/kafka-rest/:/usr/share/java/cp-base-new/*'
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19092,kafka3:19092
      CONTROL_CENTER_STREAMS_SECURITY_PROTOCOL: PLAINTEXT
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 100000000
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"

      CONTROL_CENTER_REPLICATION_FACTOR: 2

      CONTROL_CENTER_REST_LISTENERS: http://0.0.0.0:9021

      CONTROL_CENTER_CONNECT_CONNECT-CLUSTER_CLUSTER: http://connect:8083

      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schemaregistry:8081

      # Used by Control Center to connect to the Admin API for Self Balancing Clusters
      #CONTROL_CENTER_STREAMS_CPREST_URL: http://kafka1:1090

        #CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://kafka1:1090
        #CONFLUENT_METADATA_BASIC_AUTH_USER_INFO: admin:admin
      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: INFO

  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.TAG == node1"
    networks:
      - click_network
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - schemaregistry
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: INTERNAL://kafka1:19092,INTERNAL://kafka2:19092,INTERNAL://kafka3:19092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper1:1181, zookeeper2:2181, zookeeper3:3181
      DYNAMIC_CONFIG_ENABLED: 'true'
    ports:
      - 8080:8080
  redis:
    image: redis:latest
    hostname: redis
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    ports:
      - 6379:6379
    networks:
      click_network: {}
    volumes:
      - ./redis:/data
  postgres:
    image: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: "postgres"
      MAX_CONNECTION: 200
      # POSTGRES_DB: superset
      # POSTGRES_PASSWORD: superset
      # POSTGRES_USER: superset
    volumes:
      - ./config/postgres/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      click_network: {}
  superset:
    image: apache/superset:latest
    hostname: superset
    container_name: superset
    restart: on-failure:3
    ports:
      - 8088:8088
    depends_on:
      - postgres
      - redis
      - clickhouse01
      - clickhouse02
      - clickhouse03
    environment:
      SUPERSET_CONFIG_PATH: /etc/superset/superset_config.py
    volumes:
      - ./superset/superset_init.sh:/docker-entrypoint-initdb.d/superset_init.sh
      - ./superset/docker_entrypoint.sh:/docker-entrypoint-initdb.d/docker_entrypoint.sh
      - ./superset:/etc/superset
    networks:
      click_network: {}
    entrypoint: /docker-entrypoint-initdb.d/docker_entrypoint.sh
    # command: tail -f /dev/null
    # sh -c  "pip install clickhouse-connect"
    #       superset fab create-admin \
    #         --username admin \
    #         --firstname admin \
    #         --lastname admin \
    #         --email admin@example.com \
    #         --password admin 
    #       superset db upgrade
    #       superset init


  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8085:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      click_network: {}

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      click_network: {}

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      click_network: {}

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      click_network: {}

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - .:/sources
    networks:
      click_network: {}

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    networks:
      click_network: {}

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      click_network: {}


